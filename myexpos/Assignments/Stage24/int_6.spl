[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 7;
alias userSP R0;
userSP = SP;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
alias PhyPage R1;
alias offset R2;
alias filePhyAdd R3;
PhyPage = [PTBR + 2 * ((userSP - 4) / 512)];
offset = (userSP - 4) % 512;
filePhyAdd = (PhyPage * 512) + offset;
alias fileDesc R4;
fileDesc = [filePhyAdd];
if (fileDesc != -1)
then
	alias page R1;
	page = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 + 512;
	if ((fileDesc < 0) || (fileDesc > 7) || ([page - 2 * (7 - fileDesc) - 2] != FILE)) then
		[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -1;
		//print [page - 2 * (7 - fileDesc) - 2];
		//breakpoint;
	else
		alias indexft R2;
		alias inode R3;
		indexft = [page - 2 * (7 - fileDesc) - 1];
		inode = [OPEN_FILE_TABLE + 4 * indexft];
		// acquire inode
		multipush(R0, R1, R2, R3, R4);
		R1 = 4;
		R2 = inode;
		R3 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_0;
		alias res R6;
		res = R0;
		multipop(R0, R1, R2, R3, R4);
		if (res < 0) then
			[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -1;
		else
			alias lseek R5;
			lseek = [OPEN_FILE_TABLE + 4 * indexft + 2];
			alias mem R6;
			mem = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
			mem = [PTBR + 2 * (mem / 512)] * 512 + (mem % 512);
			if (inode == INODE_ROOT) then
				if (lseek == 480) then
					// release inode
					multipush(R0);
					R1 = 5;
					R2 = inode;
					R3 = [SYSTEM_STATUS_TABLE + 1];
					call MOD_0;
					multipop(R0);
					[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -2;
					SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
					[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
					ireturn;
				endif;
				[mem] = [ROOT_FILE + lseek];
				[OPEN_FILE_TABLE + 4 * indexft + 2] = [OPEN_FILE_TABLE + 4 * indexft + 2] + 1;
			else
				if (lseek == [INODE_TABLE + 16 * inode + 2]) then
					// release inode
					multipush(R0);
					R1 = 5;
					R2 = inode;
					R3 = [SYSTEM_STATUS_TABLE + 1];
					call MOD_0;
					multipop(R0);
					[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -2;
					SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
					[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
					ireturn;
				endif;
				alias block R7;
				alias disk R8;
				alias offset R9;
				block = lseek / 512;
				disk = [INODE_TABLE + 16 * inode + block + 8];
				offset = lseek % 512;
				breakpoint;
				multipush(R0, R2, R3);
				R1 = 2;
				R2 = disk;
				R3 = offset;
				R4 = mem;
				call MOD_3;
				multipop(R0, R2, R3);
				[OPEN_FILE_TABLE + 4 * indexft + 2] = [OPEN_FILE_TABLE + 4 * indexft + 2] + 1;
				
				// release inode
				multipush(R0);
				R1 = 5;
				R2 = inode;
				R3 = [SYSTEM_STATUS_TABLE + 1];
				call MOD_0;
				multipop(R0);
				breakpoint;
				// [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -2;
			endif;
		endif;
		alias phyAdd R5;
		phyAdd = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
		[phyAdd] = 0;
	endif;
else
	alias word_add R5;
	word_add = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
	multipush(R0, R1, R2, R3, R4, R5);
	R1 = 4;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = word_add;
	call MOD_4;
	//print word;
	multipop(R0, R1, R2, R3, R4, R5);
	alias phyAdd R6;
	phyAdd = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[phyAdd] = 0;
endif;
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
ireturn;
