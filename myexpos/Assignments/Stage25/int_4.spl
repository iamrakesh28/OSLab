alias userSP R0;
userSP = SP;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
alias syscall R1;
alias ret R10;
syscall = [[PTBR + 2 * ((userSP - 5) / 512)] * 512 + (userSP - 5) % 512];
ret = [PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512;

// create
if (syscall == 1) then
	alias filename R2;
	alias perm R3;
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 1;
	filename = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];
	perm = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + (userSP - 3) % 512];

	alias entry R4;
	entry = 1;
	alias alr R5;
	alr = 0;
	while (entry < MAX_FILE_NUM) do
		if ([INODE_TABLE + entry * 16 + 1] == filename) then
			alr = 1;
			break;
		endif;
		if ([INODE_TABLE + entry * 16 + 1] == -1) then
			break;
		endif;
		entry = entry + 1;
	endwhile;

	if (alr == 1) then
		[ret] = 0;
		SP = userSP;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		ireturn;
	endif;
	if (entry == MAX_FILE_NUM) then
		[ret] = -1;
	else
		// inode table
		[INODE_TABLE + entry * 16 + 1] = filename;
		[INODE_TABLE + entry * 16] = DATA;		// file type
		[INODE_TABLE + entry * 16 + 2] = 0; 	// filesize
		alias id R6;
		id = 8;
		while (id < 12) do
			[INODE_TABLE + entry * 16 + id] = -1;
			id = id + 1;
		endwhile;
		// userid
		[INODE_TABLE + entry * 16 + 3] = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 3];
		[INODE_TABLE + entry * 16 + 4] = perm;

		//root file
		[ROOT_FILE + entry * 8] = filename;
		[ROOT_FILE + entry * 8 + 1] = 0;		//size
		[ROOT_FILE + entry * 8 + 2] = DATA;	// filetype
		[ROOT_FILE + entry * 8 + 3] = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 3];		// username
		[ROOT_FILE + entry * 8 + 4] = perm;	// permission
		[ret] = 0;
	endif;
endif;

// delete
if (syscall == 4) then
	alias filename R2;
	alias data R3;
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 4;
	filename = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];

	alias entry R4;
	entry = 1;
	data = 1;
	while (entry < MAX_FILE_NUM) do
		if ([INODE_TABLE + entry * 16 + 1] == filename) then
			if ([INODE_TABLE + entry * 16] != DATA) then
				data = 0;
			endif;
			break;
		endif;
		entry = entry + 1;
	endwhile;
	if (entry == MAX_FILE_NUM) then
		[ret] = 0;
		SP = userSP;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		ireturn;
	endif;
	if (data == 0) then
		[ret] = -1;
	else
		if ([INODE_TABLE + entry * 16 + 4] == EXCLUSIVE) then
			if (([SYSTEM_STATUS_TABLE + 1] != 1) && ([INODE_TABLE + entry * 16 + 3] != [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 3])) then
			SP = userSP;
			[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
			[ret] = -1;
			ireturn;
			endif;
		endif;

		multipush(R0, R1, R4);
		R1 = 4;
		R2 = entry;
		R3 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_0;
		multipop(R0, R1, R4);
		
		// release file if file is opened
		if ([FILE_STATUS_TABLE + entry * 4 + 1] != -1) then
			multipush(R0);
			R1 = 5;
			R2 = entry;
			R3 = [SYSTEM_STATUS_TABLE + 1];
			call MOD_0;
			multipop(R0);
	
			// SP = userSP;
			// [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
			// [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = -2;
			// ireturn;
		else
		
			alias id R5;
			id = 0;
			while (id < 4) do
				if ([INODE_TABLE + entry * 16 + 8 + id] != -1) then
					alias temp R6;
					temp = [INODE_TABLE + entry * 16 + 8 + id] % MAX_BUFFER;
					if (([BUFFER_TABLE + temp] != -1) && ([BUFFER_TABLE + temp + 1] == 1)) then
						[BUFFER_TABLE + temp + 1] = 0;
					endif;
					
					// release block
					multipush(R0, R1, R4, R5);
					R1 = 4;
					R2 = [INODE_TABLE + entry * 16 + 8 + id];
					R3 = [SYSTEM_STATUS_TABLE + 1];
					call MOD_2;
					multipop(R0, R1, R4, R5);
				endif;
				id = id + 1;
			endwhile;
			[INODE_TABLE + entry * 16 + 1] = -1;
			[ROOT_FILE + entry * 8] = -1;
			multipush(R0);
			R1 = 5;
			R2 = entry;
			R3 = [SYSTEM_STATUS_TABLE + 1];
			call MOD_0;
			multipop(R0);
			breakpoint;
		endif;
	endif;
endif;
SP = userSP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
ireturn;
