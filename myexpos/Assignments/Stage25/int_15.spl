alias userSP R0;
userSP = SP;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
alias syscall R1;

syscall = [[PTBR + 2 * ((userSP - 5) / 512)] * 512 + (userSP - 5) % 512];
if (syscall == 21) then

	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 21;
	alias userid R2;
	alias pid R3;
	pid = [SYSTEM_STATUS_TABLE + 1];
	userid = [PROCESS_TABLE + pid * 16 + 3];
	if ((pid != 1) || (userid != 1)) then
		SP = userSP;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = -1;
		ireturn;
	endif;
	// inode table and user table
	multipush(R2, R3);
	R1 = 1;
	R2 = pid;
	R3 = 59;
	R4 = 3;
	call MOD_4;
	multipop(R2, R3);

	multipush(R2, R3);
	R1 = 1;
	R2 = pid;
	R3 = 60;
	R4 = 4;
	call MOD_4;
	multipop(R2, R3);

	// disk free list
	multipush(R2, R3);
	R1 = 1;
	R2 = pid;
	R3 = 61;
	R4 = 2;
	call MOD_4;
	multipop(R2, R3);

	// root file
	multipush(R2, R3);
	R1 = 1;
	R2 = pid;
	R3 = 62;
	R4 = 5;
	call MOD_4;
	multipop(R2, R3);
endif;
halt;
